<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and Salesforce User Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to aggregate users from two Salesforce Instances and compare them to see which users can only be found in one of the two and which users are in both instances. 

For practical purposes this Template will generate the result in the format of a CSV Report sent by mail.

This template serves as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects, and generating a report on the differences. 

As implemented, it gets users from two instances of Salesforce, compares by the email address of the users, and generates a CSV file which shows users in A, users in B, and Users in A and B. The report is then emailed to a configured group of email addresses.
		</section>
		<section id="considerations">

To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for the template to run smoothly. **Failing to do so could lead to unexpected behavior of the template.**

		</section>
		<section id="running_on_cloudhub">

Once your app is all set and started, supposing you choose as domain name `sfdcuseraggregation` to trigger the use case you just need to browse to `http://sfdcuseraggregation.cloudhub.io/generatereport` and the report will be sent to the emails configured.


		</section>
		<section id="default_running_on_premise">

Complete all properties in one of the property files, for example in [mule.prod.properties] (../blob/master/src/main/resources/mule.prod.properties) and run your app with the corresponding environment variable to use it. To follow the example, this will be `mule.env=prod`.

After this, to trigger the use case you just need to browse to the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should browse to: `http://localhost:9090/generatereport` and this will create a CSV report and send it to the mails set.

		</section>
		<section id="application_configuration">
		
**HTTP Connector Configuration**
+ http.port `9090` 

**SalesForce Connector configuration for company A**
+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**SalesForce Connector configuration for company B**
+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`


**SMTP Services Configuration**
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `exampleuser@gmail.com`
+ smtp.password `ExamplePassword456`

**Mail details**
+ mail.from `exampleuser1@gmail.com`
+ mail.to `exampleuser2@gmail.com`
+ mail.subject `Salesforce Users Report`
+ mail.body `Users report comparing users from Salesforce Accounts`
+ attachment.name `OrderedReport.csv`

		</section>
		<section id="api_calls">
		
Salesforce imposes limits on the number of API Calls that can be made. However, we make API call to Salesforce only once during aggregation. 

		</section>
		<section id="default_endpoints_xml">
		
This file provides the endpoint to start the aggregation. This Template has an HTTP Inbound Endpoint as the way to trigger the use case.

$H$H# Trigger Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.


		</section>
		<section id="default_business_logic_xml">
		
Functional aspect of the Template is implemented on this XML, directed by one flow responsible of conducting the aggregation of data, comparing records and finally formatting the output, in this case being a report.

Using Scatter-Gather component we are querying the data in different systems. After that the aggregation is implemented in DataWeave 2 script using Transform component.
Aggregated results are sorted by source of existence:

1. Users only in Salesforce A
2. Users only in Salesforce B
3. Users in both Salesforce A and Salesforce B

and transformed to CSV format. Final report in CSV format is sent to email, that you configured in mule.*.properties file.

		</section>
	</sections>
</configuration>